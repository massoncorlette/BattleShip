https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode


This projects instructions provides pretty minimal directions on how to go about 
making this. I have more freedom on this than any previous project, here is 
some things I want to make sure of:

- Make sure to use decoupled pure functions for Test Driven Development, this would
also result in following SOLID principles

- Pay attention to how I represent the gameboard, since I want the ships to be able 
to change direction. 

- USE PRETTIER extension at the end of project, I always forget to.


Psuedo (game.js)

***We can use an adjacency list for computer
attacks (attacking surrounding coordinates from 
potential moves from given vertice)***

intializingApp() will use DOM function to render
--
** I can TDD all these functions in order **
1. startGame(computer/human) calling placeAllShips()

2. placeAllShips(player) will place all the ships for the passed Player obj's ships
calling shipPlacements on every ship stored in the Object

3. shipPlacements() used to generate randomly/get all coordinates for all ships, calling
placeShip(), using generateRandom until coordinate is valid to place

	(2b. generateRandom coordinates between 0-8 for both X and Y)

4. placeShip() will use a given ships properties to check along X or Y axis, calling
checkForPlacedShips() upon every coorindate

5. checkForPlacedShips() will check to make sure coordinates for ship is valid,
checking ship adjacency list for already placed ships (first vertex given coordinate)

6. testShipPlacement() used for TDD and check out of bounds

Pseudo in plain english:

upon starting the game, we will pass all the properties that will come from DOM into 
function to ultimately generate and check if coordinates for ship placement is valid.
Until the coordinates are not in the way of other ships (based upon the given coordinates
length and direction) and checking inside players placedShips list, we can check for true
return from checkingShipPlacement.

Pseudo (dom.js)


1. load in the start screen

2. based upon mode load the game

3. load the board along with making two player objects (second obj comp/human)

    3a. place all ships (random for right now)

    3b. switch player function

    3c. getCoordinates used to switch eventListener for current active board

4. based upon current player turn, listen for coordinates and return them,
use switch player function

5. use the returned coordinates to pass onto the opponents recieve attack in
gameBoard obj **pushing missed attacks to gameBoard in player.gameboard obj**

  5a. if the recieveAttack returns true, game over - attacking player wins

  5b. if ship is sunk will return the name of the ship for UI

  5c. if missed shot, false is returned


*** We may have to rework more logic than I think for drag and drop. ***


- Try to follow the conventional Git command standards

1. Type: Purpose of the commit
	- feat: New feature
	- fix: Bug fix
	- docs: Documentation only
	- style: Code style (no logic changes)
	- refactor: Code changes without new features or bug fixes
	- perf: Performance improvements
	- test: Tests only
	- chore: Build or tooling updates
2. Scope: (Optional) What part of the project is affected.
3. Description: Brief summary of the change.
4. Body and Footer: (Optional) Additional details or metadata (e.g., BREAKING CHANGE).

Example

```
feat(auth): add OAuth2 login support
```