https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode


This projects instructions provides pretty minimal directions on how to go about 
making this. I have more freedom on this than any previous project, here is 
some things I want to make sure of:

- Make sure to use decoupled pure functions for Test Driven Development, this would
also result in following SOLID principles

- Pay attention to how I represent the gameboard, since I want the ships to be able 
to change direction. 

- USE PRETTIER extension at the end of project, I always forget to.


Psuedo (game.js)

***We can use an adjacency list for computer
attacks (attacking surrounding coordinates from 
potential moves from given vertice)***

intializingApp() will use DOM function to render
--
** I can TDD all these functions in order **
1. startGame(computer/human) will initialize two Player Objects,
returning them to access in DOM

  1b.(DOM) Update players ships, while being placed
  1c. Upon being all placed initiate placeAllShips for each player

2. placeAllShips(player) will place all the ships for the passed Player obj's ships
calling shipPlacements on every ship stored in the Object

3. shipPlacements() used to check if placement is valid using other functions that
check for other ships, and it it goes out of bounds. 
If it is valid, calls playersBoard.placeShip(). Else return false to DOM

4. placeShip() will finally make the ship Obj, and from passed starting coordinate,
will push all the coordinates ship covers, pushing new ship to players ships. 


Pseudo in plain english:

upon starting the game, we will pass all the properties that will come from DOM into 
function to ultimately generate and check if coordinates for ship placement is valid.
Until the coordinates are not in the way of other ships (based upon the given coordinates
length and direction) and checking inside players placedShips list, we can check for true
return from checkingShipPlacement.

Pseudo (dom.js)


1. loadScreen from index.js 

2. based upon mode loadGame (loading boards and ships)

  2b. loadPlayers will make two players objects, use function to switch
  players, maybe using global or hoisting a variable for current player?

3. loadShips will setup ships drag and drop

  3a. divImages loading in the ships, adding draggableProperties
  giving each element with shipPNGs id's that can pass into players ship
  object properties?

  3b. setDrop will take droppable ship and add Drag and Drop eventListener

    3ba. drop event will place players ships, if function returns true.
    Else if false, prevent drop.

    3bc. if all ships are placed succesfully, switch to place other players,
    else start gameplay

4. gamePlay will playout the game, switching players turns, while using
attack function from ship obj that has logic for if player wins. 


- Try to follow the conventional Git command standards

1. Type: Purpose of the commit
	- feat: New feature
	- fix: Bug fix
	- docs: Documentation only
	- style: Code style (no logic changes)
	- refactor: Code changes without new features or bug fixes
	- perf: Performance improvements
	- test: Tests only
	- chore: Build or tooling updates
2. Scope: (Optional) What part of the project is affected.
3. Description: Brief summary of the change.
4. Body and Footer: (Optional) Additional details or metadata (e.g., BREAKING CHANGE).

Example

```
feat(auth): add OAuth2 login support
```